[build-system]
build-backend = "setuptools.build_meta"
requires = ["setuptools-scm>=8", "setuptools>=80"]

[dependency-groups]
ci = [
    "pre-commit-uv>=4.1.5",
    "pre-commit>=4.3.0",
]
dev = [
    "commitizen>=1.0.0",
    "darglint2==v1.8.2",
    "flake8-bugbear>=24.12.12",
    "flake8-builtins>=3.0.0",
    "flake8-comprehensions>=3.17.0",
    "flake8-docstrings>=1.7.0",
    "flake8-rst-docstrings>=0.3.1",
    "flake8-rst>=0.8.0",
    "flake8>=7.3.0",
    "mypy>=1.3",
    "nox>=2025.5.1",
    "pandas-stubs>=2.2.2.240807",
    "pylint-per-file-ignores>=2.0.3",
    "pylint>=3.3.8",
    "ruff>=0.13.0",
    "types-ipaddress>=1.0.8",
    "types-pyyaml>=6.0.12.20250915",
    "types-requests>=2.32.4.20250913",
    {include-group = "ci"},
    {include-group = "doc"},
    {include-group = "test"},
]
doc = [
    "mkdocs-material>=9.6.20",
    "mkdocs>=1.6.1",
    "sphinx>=7.4.7",
]
test = [
    "pytest-cov>=7.0.0",
    "pytest-mock>=3.15.1",
    "pytest-randomly>=4.0.1",
]

[project]
authors = [
    {email = "t&iconnectivityboardfarm@libertyglobal.com", name = "Various"},
]
classifiers = [
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "Intended Audience :: Telecommunications Industry",
    "License :: OSI Approved :: BSD License",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.9",
    "Topic :: Software Development :: Embedded Systems",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: Software Development :: Testing :: Acceptance",
    "Topic :: Software Development :: Testing",
    "Typing :: Typed",
]
dependencies = [
    "beautifulsoup4>=4.13.5",
    "debtcollector>=3.0.0",
    "httpx>=0.28.1",
    "importlib-metadata>=8.7.0",
    "jc>=1.25.5",
    "jsonmerge>=1.9.2",
    "kafka-python-ng>=2.2.3",
    "netaddr>=1.3.0",
    "opencv-python>=4.12.0.88", # image comparison
    "pandas>=2.3.2",
    "pexpect>=4.9",
    "pluggy>=1.0.0",
    "ptipython>=1.0.1",
    "pyasn1==0.6.0",
    "pysmi>=1.6.2",
    "pysnmp-lextudio>=6,<6.1.2",
    "pytest>=8.4.2",
    "pyyaml>=6.0.2",
    "requests>=2.32.5",
    "rich>=14.1.0",
    "scikit-image>=0.24.0", # image comparison
    "selenium<4.15.0",
    "termcolor>=3.1.0",
    "xmltodict>=1.0.0",
]
description = "Automated testing of network devices."
dynamic = ['version']
license = {file = "LICENSE"}
name = "boardfarm3"
readme = "docs/index.md"
requires-python = ">=3.9"

[project.entry-points."boardfarm"]
booting = "boardfarm3.plugins.setup_environment"
core = "boardfarm3.plugins.core"
no_reservation = "boardfarm3.plugins.no_reservation"

[project.optional-dependencies]
docsis = ["boardfarm3-docsis>=1.0.0"]
pytest = ["pytest-boardfarm3>=1.0.0"]

[project.scripts]
boardfarm = "boardfarm3.main:main"

[project.urls]
Documentation = "https://ketantewari.github.io/boardfarm/"
Source = "https://github.com/lgirdk/boardfarm"

[tool.commitizen]
bump_message = "Bump version to $new_version"
name = "cz_conventional_commits"
style = [
    [
        "",
        "instruction",
    ],
    [
        "",
        "text",
    ],
    [
        "answer",
        "fg:#ff9d00 bold",
    ],
    [
        "bold",
        "question",
    ],
    [
        "disabled",
        "fg:#858585 italic",
    ],
    [
        "fg:#cc5454",
        "selected",
    ],
    [
        "fg:#cc5454",
        "separator",
    ],
    [
        "fg:#ff9d00 bold",
        "highlighted",
    ],
    [
        "fg:#ff9d00 bold",
        "pointer",
    ],
    [
        "fg:#ff9d00 bold",
        "qmark",
    ],
]
tag_format = "$version"
version = "2025.8.12a15"
version_files = [
    "boardfarm3/__init__.py:version",
    "pyproject.toml:current",
    "pyproject.toml:version",
]

[tool.mypy]
disallow_untyped_defs = true
ignore_missing_imports = true
no_strict_optional = true
pretty = true
show_error_codes = true
warn_redundant_casts = true
warn_unreachable = true

[tool.pylint.MASTER]
load-plugins = ["pylint_per_file_ignores"]

[tool.pylint-per-file-ignores]
"/unittests/" = "R0903,C0116,C0103,W0613"

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]
line-length = 88
target-version = "py39"

[tool.ruff.format]
# Enable reformatting of code snippets in docstrings.
docstring-code-format = true

[tool.ruff.lint]
# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
ignore = [
    "ANN204", # annotation of __init__()
    "COM812", # The following rule may cause conflicts when used with the formatter
    "D203",
    "D213",
    "E501", # line too long ignoring
    "FBT", # boolean trap, no clear solution
    "FIX002", # we need to keep TODOs in the code
    "ISC001", # The following rule may cause conflicts when used with the formatter
    "N", # naming convention, already covered by pylint
    "PT003", # allow scope=function to be explicitly passed to fixtures
    "SIM114", # simplify if-elif by AND/OR combinations
    "TD", # would conflict with TODO highligther
]
select = ["ALL"]
unfixable = [
    "F401", # unused imports - we must know if we forgot something...
]

[tool.ruff.lint.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.ruff.lint.per-file-ignores]
"boardfarm3/lib/parsers/*" = [
    "ALL", # parsers are to be rewritten with JC
]
"boardfarm3/plugins/hookspecs/*" = [
    "ARG001", # hook specs never use any argument
]
"unittests/*" = [
    "ANN401", # dynamically typed expressions (typing.Any) are used in arguments
    "D103", # doc-strings are not mandatory for unittests
    "E501", # line too long errors are ignored for unittests
    "INP001", # pytest works this way
    "PLR2004", # Magic value used in comparison
    "S101", # we do use assert in unit test written for pytest
    "SLF001", # we do access private members for validation in unittests
]

[tool.setuptools_scm]
version_scheme = "no-guess-dev"

[tool.tbump]

[tool.tbump.git]
message_template = "Bump to {new_version}"
tag_template = "{new_version}"

# Uncomment this if your project is hosted on GitHub:
# github_url = "https://github.com/<user or organization>/<project>/"
[tool.tbump.version]
current = "2025.8.12a15"
# Example of a semver regexp.
# Make sure this matches current_version before
# using tbump
regex = '''
  (?P<major>\d+)
  \.
  (?P<minor>\d+)
  \.
  (?P<patch>\d+)
  '''
